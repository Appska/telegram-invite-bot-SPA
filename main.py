# main.py ‚Äî Render + webhook (aiogram v3)

import os
import asyncio
import json
import random
from io import BytesIO

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from PIL import Image, ImageDraw, ImageFont

# --- Webhook —Å–µ—Ä–≤–µ—Ä –Ω–∞ aiohttp
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# --- Google Sheets (–ª–µ–Ω–∏–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ENV)
SHEET_ID = os.getenv("SHEET_ID")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: 1392i1U93gV5...
SHEETS_CREDS_JSON = os.getenv("SHEETS_CREDS_JSON")  # –ø–æ–ª–Ω—ã–π JSON —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "super_secret_123")
BASE_URL = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("BASE_URL")
PORT = int(os.getenv("PORT", "10000"))

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_data = {}
referrals = {}

# ---------- Google Sheets helpers ----------
def get_worksheet():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç sheet1 –∏–ª–∏ None, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã.
    –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è ¬´–ª–µ–Ω–∏–≤–æ¬ª, —á—Ç–æ–±—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–π –Ω–µ –ª–æ–º–∞–ª–æ –±–æ—Ç–∞.
    """
    if not (SHEET_ID and SHEETS_CREDS_JSON):
        return None
    import gspread
    from google.oauth2.service_account import Credentials

    creds_dict = json.loads(SHEETS_CREDS_JSON)
    creds = Credentials.from_service_account_info(
        creds_dict,
        scopes=["https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive"]
    )
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(SHEET_ID)
    return sh.sheet1

def save_guest_to_sheets(user_id, first_name, last_name, company):
    try:
        ws = get_worksheet()
        if not ws:
            return
        # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
        ws.append_row([first_name, last_name, company, str(user_id)])
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:", e)

# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    text = message.text or ""
    parts = text.split(maxsplit=1)
    args = parts[1] if len(parts) > 1 else None
    inviter_id = int(args) if (args and args.isdigit()) else None
    user_id = message.from_user.id

    if inviter_id and inviter_id != user_id:
        referrals.setdefault(inviter_id, [])
        if user_id not in referrals[inviter_id]:
            referrals[inviter_id].append(user_id)

    # –±–∞–Ω–Ω–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
    if os.path.exists("templates/banner.png"):
        banner = FSInputFile("templates/banner.png")
        await message.answer_photo(photo=banner)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω–≤–∞–π—Ç, –∞ —Ç–∞–∫–∂–µ –¥–∞—ë—Ç –ø—Ä–∞–≤–æ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ VIP –±–∏–ª–µ—Ç–∞ –Ω–∞ PRO PARTY –æ—Ç Digital CPA Club. "
        "–í–µ—á–µ—Ä–∏–Ω–∫–∞ –ø—Ä–æ–π–¥—ë—Ç 14 –∞–≤–≥—É—Å—Ç–∞ –≤ –ú–æ—Å–∫–≤–µ –≤ noorbar.com, —Å –∫–µ–π—Å-–ø—Ä–æ–≥—Ä–∞–º–º–æ–π, "
        "—Ç–∞–Ω—Ü–∞–º–∏, –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–æ–º –∏ –∫–æ–∫—Ç–µ–π–ª—è–º–∏.\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "
        "[–∑–¥–µ—Å—å](https://digitalclub.timepad.ru/event/3457454/)",
        parse_mode="Markdown"
    )
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    user_data[user_id] = {}

@dp.message(lambda m: m.from_user.id in user_data and 'first_name' not in user_data[m.from_user.id])
async def get_first_name(message: types.Message):
    user_data[message.from_user.id]['first_name'] = (message.text or "").strip()
    await message.answer("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?")

@dp.message(lambda m: m.from_user.id in user_data and 'last_name' not in user_data[m.from_user.id])
async def get_last_name(message: types.Message):
    user_data[message.from_user.id]['last_name'] = (message.text or "").strip()
    await message.answer("–ò–∑ –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏?")

@dp.message(lambda m: m.from_user.id in user_data and 'company' not in user_data[m.from_user.id])
async def get_company(message: types.Message):
    user_data[message.from_user.id]['company'] = (message.text or "").strip()
    first = user_data[message.from_user.id]['first_name'] or "–ì–æ—Å—Ç—å"
    await message.answer(f"{first}, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.")
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ï—â—ë —Å–µ–∫—É–Ω–¥—É üòä")

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo_size = message.photo[-1]
    file = await bot.get_file(photo_size.file_id)
    bio = BytesIO()
    await bot.download_file(file.file_path, bio)
    bio.seek(0)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
    if not os.path.exists("templates/template.png"):
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª templates/template.png (1080√ó1080). –ó–∞–≥—Ä—É–∑–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    template = Image.open("templates/template.png").convert("RGBA")
    overlay = Image.new('RGBA', template.size, (255, 255, 255, 0))

    # –ì–æ—Ç–æ–≤–∏–º –∞–≤–∞—Ç–∞—Ä
    avatar = Image.open(bio).convert("RGBA")
    w, h = avatar.size
    tw, th = 471, 613  # —Ç–≤–æ–∏ —Ä–∞–∑–º–µ—Ä—ã –∫–∞–¥—Ä–∞

    scale = max(tw / w, th / h)
    new_w = int(w * scale)
    new_h = int(h * scale)
    avatar = avatar.resize((new_w, new_h), Image.LANCZOS)

    left = (new_w - tw) // 2
    top = (new_h - th) // 2
    avatar = avatar.crop((left, top, left + tw, top + th))

    # –°–∫—Ä—É–≥–ª–µ–Ω–∏–µ + –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±–≤–æ–¥–∫–∞
    mask = Image.new('L', (tw, th), 0)
    md = ImageDraw.Draw(mask)
    md.rounded_rectangle((0, 0, tw, th), radius=40, fill=255)
    avatar.putalpha(mask)

    border = Image.new('RGBA', (tw + 4, th + 4), (0, 0, 0, 0))
    bd = ImageDraw.Draw(border)
    bd.rounded_rectangle((0, 0, tw + 2, th + 2), radius=40, outline='#FD693C', width=2)
    border.paste(avatar, (2, 2), avatar)

    # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª —Å —Ç–≤–æ–∏–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏)
    pos = (template.width - 80 - tw, template.height - 377 - th)
    overlay.paste(border, pos, border)
    final = Image.alpha_composite(template, overlay)

    # –ü–æ–¥–ø–∏—Å–∏
    draw = ImageDraw.Draw(final)
    try:
        name_font = ImageFont.truetype("fonts/GothamPro-Black.ttf", 35)
        comp_font = ImageFont.truetype("fonts/GothamPro-Medium.ttf", 30)
    except Exception:
        # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —à—Ä–∏—Ñ—Ç—ã –Ω–µ –Ω–∞—à–ª–∏
        name_font = ImageFont.truetype("arial.ttf", 35)
        comp_font = ImageFont.truetype("arial.ttf", 30)

    uid = message.from_user.id
    full_name = f"{user_data[uid].get('first_name','')} {user_data[uid].get('last_name','')}".strip()
    company = user_data[uid].get('company', '')

    # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç (–∫–∞–∫ —É —Ç–µ–±—è)
    draw.text((pos[0], pos[1] + th + 50), full_name, font=name_font, fill=(255, 255, 255))
    draw.text((pos[0], pos[1] + th + 100), company, font=comp_font, fill=(255, 255, 255))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    path = f"invite_{uid}.png"
    final.convert("RGB").save(path, format="PNG")
    await message.answer_photo(photo=FSInputFile(path))

    await message.answer(
        "–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ VIP –±–∏–ª–µ—Ç–∞ ‚Äî\n"
        "–û–ø—É–±–ª–∏–∫—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Å—Ç–æ—Ä–∏—Å TG, FB –∏–ª–∏ IG, –ø—Ä–∏–∫—Ä–µ–ø–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Timepad (https://digitalclub.timepad.ru/event/3457454/)\n"
    )
    await message.answer(
        "üéÅ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º 12 –∞–≤–≥—É—Å—Ç–∞.\n\n"
        "–°–ª–µ–¥–∏ –∑–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º –∏ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –∫–ª—É–±–µ [–∑–¥–µ—Å—å](https://t.me/+l6rrLeN7Eho3ZjQy)\n\n"
        "–ñ–µ–ª–∞–µ–º —Ç–µ–±–µ —É–¥–∞—á–∏! üçÄ",
        parse_m_
