# main.py

import logging
import os
import asyncio
import json
import random
from io import BytesIO

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from PIL import Image, ImageDraw, ImageFont

import gspread
from google.oauth2.service_account import Credentials

from keep_alive import keep_alive
keep_alive()

API_TOKEN = os.getenv("TELEGRAM_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_data = {}
referrals = {}

# ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
SHEET_ID = "1392i1U93gV5FzipUXQ8RN9oP6xcr5i-Obbr4DdWCh84"
SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

creds = Credentials.from_service_account_file("credentials.json", scopes=SCOPE)
gs_client = gspread.authorize(creds)
sheet = gs_client.open_by_key(SHEET_ID).sheet1

def save_guest_to_sheets(user_id, first_name, last_name, company):
    try:
        sheet.append_row([first_name, last_name, company, str(user_id)])
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:", e)

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    text = message.text or ""
    parts = text.split(maxsplit=1)
    args = parts[1] if len(parts) > 1 else None
    inviter_id = int(args) if (args and args.isdigit()) else None
    user_id = message.from_user.id

    if inviter_id and inviter_id != user_id:
        referrals.setdefault(inviter_id, [])
        if user_id not in referrals[inviter_id]:
            referrals[inviter_id].append(user_id)

    banner = FSInputFile("templates/banner.png")
    await message.answer_photo(photo=banner)
    await asyncio.sleep(2)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω–≤–∞–π—Ç, –∞ —Ç–∞–∫–∂–µ –¥–∞—ë—Ç –ø—Ä–∞–≤–æ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ VIP –±–∏–ª–µ—Ç–∞ –Ω–∞ PRO PARTY –æ—Ç Digital CPA Club. "
        "–í–µ—á–µ—Ä–∏–Ω–∫–∞ –ø—Ä–æ–π–¥—ë—Ç 14 –∞–≤–≥—É—Å—Ç–∞ –≤ –ú–æ—Å–∫–≤–µ –≤ noorbar.com, —Å –∫–µ–π—Å-–ø—Ä–æ–≥—Ä–∞–º–º–æ–π, "
        "—Ç–∞–Ω—Ü–∞–º–∏, –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–æ–º –∏ –∫–æ–∫—Ç–µ–π–ª—è–º–∏.\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "
        "[–∑–¥–µ—Å—å](https://digitalclub.timepad.ru/event/3457454/)", parse_mode="Markdown"
    )
    await asyncio.sleep(2)
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    user_data[user_id] = {}

@dp.message(lambda m: m.from_user.id in user_data and 'first_name' not in user_data[m.from_user.id])
async def get_first_name(message: types.Message):
    user_data[message.from_user.id]['first_name'] = message.text.strip()
    await asyncio.sleep(2)
    await message.answer("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?")

@dp.message(lambda m: m.from_user.id in user_data and 'last_name' not in user_data[m.from_user.id])
async def get_last_name(message: types.Message):
    user_data[message.from_user.id]['last_name'] = message.text.strip()
    await asyncio.sleep(2)
    await message.answer("–ò–∑ –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏?")

@dp.message(lambda m: m.from_user.id in user_data and 'company' not in user_data[m.from_user.id])
async def get_company(message: types.Message):
    user_data[message.from_user.id]['company'] = message.text.strip()
    first = user_data[message.from_user.id]['first_name']
    await asyncio.sleep(2)
    await message.answer(f"{first}, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.")
    await asyncio.sleep(2)
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ï—â—ë —Å–µ–∫—É–Ω–¥—É üòä")

    photo_size = message.photo[-1]
    file = await bot.get_file(photo_size.file_id)
    bio = BytesIO()
    await bot.download_file(file.file_path, bio)
    bio.seek(0)

    template = Image.open("templates/template.png").convert("RGBA")
    overlay = Image.new('RGBA', template.size, (255, 255, 255, 0))

    avatar = Image.open(bio).convert("RGBA")
    w, h = avatar.size
    tw, th = 471, 613

    scale = max(tw / w, th / h)
    new_w = int(w * scale)
    new_h = int(h * scale)
    avatar = avatar.resize((new_w, new_h), Image.LANCZOS)

    left = (new_w - tw) // 2
    top = (new_h - th) // 2
    avatar = avatar.crop((left, top, left + tw, top + th))

    mask = Image.new('L', (tw, th), 0)
    md = ImageDraw.Draw(mask)
    md.rounded_rectangle((0, 0, tw, th), radius=40, fill=255)
    avatar.putalpha(mask)

    border = Image.new('RGBA', (tw + 4, th + 4), (0, 0, 0, 0))
    bd = ImageDraw.Draw(border)
    bd.rounded_rectangle((0, 0, tw + 2, th + 2), radius=40, outline='#FD693C', width=2)
    border.paste(avatar, (2, 2), avatar)

    pos = (template.width - 80 - tw, template.height - 377 - th)
    overlay.paste(border, pos, border)
    final = Image.alpha_composite(template, overlay)

    draw = ImageDraw.Draw(final)
    name_font = ImageFont.truetype("fonts/GothamPro-Black.ttf", 35)
    comp_font = ImageFont.truetype("fonts/GothamPro-Medium.ttf", 30)

    uid = message.from_user.id
    full_name = f"{user_data[uid]['first_name']} {user_data[uid]['last_name']}"
    company = user_data[uid]['company']

    draw.text((pos[0], pos[1] + th + 50), full_name, font=name_font, fill=(255, 255, 255))
    draw.text((pos[0], pos[1] + th + 100), company, font=comp_font, fill=(255, 255, 255))

    path = f"invite_{uid}.png"
    final.convert("RGB").save(path, format="PNG")
    await message.answer_photo(photo=FSInputFile(path))

    await asyncio.sleep(2)
    await message.answer(
        "–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ VIP –±–∏–ª–µ—Ç–∞ ‚Äî\n"
        "–û–ø—É–±–ª–∏–∫—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Å—Ç–æ—Ä–∏—Å TG, FB –∏–ª–∏ IG, –ø—Ä–∏–∫—Ä–µ–ø–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Timepad (https://digitalclub.timepad.ru/event/3457454/)\n"
    )

    await asyncio.sleep(2)
    await message.answer(
        "üéÅ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º 12 –∞–≤–≥—É—Å—Ç–∞.\n\n"
        "–°–ª–µ–¥–∏ –∑–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º –∏ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –∫–ª—É–±–µ [–∑–¥–µ—Å—å](https://t.me/+l6rrLeN7Eho3ZjQy)\n\n"
        "–ñ–µ–ª–∞–µ–º —Ç–µ–±–µ —É–¥–∞—á–∏! üçÄ",
        parse_mode="Markdown"
    )

    await asyncio.sleep(2)
    await message.answer("–ü–æ–¥–µ–ª–∏—Å—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –ø–æ —Ä—ã–Ω–∫—É: @proparty_invite_bot")

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="retry_photo")]
        ]
    )
    await message.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup)

    save_guest_to_sheets(uid, user_data[uid]['first_name'], user_data[uid]['last_name'], user_data[uid]['company'])

    try:
        os.remove(path)
    except OSError:
        pass

@dp.callback_query(F.data == "retry_photo")
async def retry_photo_handler(callback: CallbackQuery):
    await callback.message.answer("–û–∫–µ–π! –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ, –∏ –º—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π ‚ú®")

@dp.message(Command("whoami"))
async def whoami(message: types.Message):
    await message.answer(f"–¢–≤–æ–π user_id: {message.from_user.id}")

@dp.message(Command("draw"))
async def draw_winner(message: types.Message):
    admin_ids = [2002200912]
    if message.from_user.id not in admin_ids:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É.")
        return

    try:
        records = sheet.get_all_records()
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ.")
        print("–û—à–∏–±–∫–∞ Google Sheets:", e)
        return

    if not records:
        await message.answer("–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
        return

    await message.answer("üé∞ –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞—Ä–∞–±–∞–Ω...")
    await asyncio.sleep(1)

    suspense_list = random.sample(records, min(6, len(records)))
    for r in suspense_list[:-1]:
        await message.answer(f"üåÄ {r['–ò–º—è']} {r['–§–∞–º–∏–ª–∏—è']}...")
        await asyncio.sleep(0.8)

    winner = suspense_list[-1]
    await asyncio.sleep(1.5)
    await message.answer("ü•Åü•Åü•Å")
    await asyncio.sleep(1)

    winner_name = f"{winner['–ò–º—è']} {winner['–§–∞–º–∏–ª–∏—è']}"
    winner_company = winner['–ö–æ–º–ø–∞–Ω–∏—è']
    winner_id = winner['ID']

    await message.answer(
        f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n\n"
        f"üëë {winner_name}, {winner_company}\n\n"
        f"üî• –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
    )

    try:
        await bot.send_message(
            int(winner_id),
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {winner_name}!\n\n"
            f"–¢—ã –≤—ã–∏–≥—Ä–∞–ª –ø—Ä–∏–∑ –æ—Ç Digital CPA Club üéÅ\n"
            f"–°–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ Pro Party!"
        )
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é.")
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—é:", e)

@dp.message(Command("mystats"))
async def mystats_handler(message: types.Message):
    uid = message.from_user.id
    invited = referrals.get(uid, [])
    await message.answer(f"–¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª {len(invited)} —á–µ–ª–æ–≤–µ–∫(–∞).")

async def main():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
