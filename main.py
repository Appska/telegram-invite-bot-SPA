# main.py ‚Äî Render + webhook (aiogram v3)

import os
import json
import random
import logging
from io import BytesIO

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from PIL import Image, ImageDraw, ImageFont

from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# --- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("invite-bot")

# --- ENV
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "super_secret_123")
BASE_URL = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("BASE_URL")
PORT = int(os.getenv("PORT", "10000"))

SHEET_ID = os.getenv("SHEET_ID")
SHEETS_CREDS_JSON = os.getenv("SHEETS_CREDS_JSON")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_data: dict[int, dict] = {}
referrals: dict[int, list[int]] = {}

# ---------- Google Sheets helpers ----------
def get_worksheet():
    if not (SHEET_ID and SHEETS_CREDS_JSON):
        return None
    import gspread
    from google.oauth2.service_account import Credentials

    creds_dict = json.loads(SHEETS_CREDS_JSON)
    creds = Credentials.from_service_account_info(
        creds_dict,
        scopes=[
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ],
    )
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(SHEET_ID)
    return sh.sheet1

def save_guest_to_sheets(user_id: int, first_name: str, last_name: str, company: str):
    try:
        ws = get_worksheet()
        if not ws:
            return
        ws.append_row([first_name, last_name, company, str(user_id)])
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: %s", e)

# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    text = message.text or ""
    parts = text.split(maxsplit=1)
    args = parts[1] if len(parts) > 1 else None
    inviter_id = int(args) if (args and args.isdigit()) else None
    user_id = message.from_user.id

    if inviter_id and inviter_id != user_id:
        referrals.setdefault(inviter_id, [])
        if user_id not in referrals[inviter_id]:
            referrals[inviter_id].append(user_id)

    if os.path.exists("templates/banner.png"):
        await message.answer_photo(FSInputFile("templates/banner.png"))

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω–≤–∞–π—Ç –∏ –¥–∞—ë—Ç –ø—Ä–∞–≤–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ VIP –±–∏–ª–µ—Ç–∞ –Ω–∞ PRO PARTY –æ—Ç Digital CPA Club. "
        "–í–µ—á–µ—Ä–∏–Ω–∫–∞ –ø—Ä–æ–π–¥—ë—Ç 14 –∞–≤–≥—É—Å—Ç–∞ –≤ –ú–æ—Å–∫–≤–µ –≤ noorbar.com, —Å –∫–µ–π—Å-–ø—Ä–æ–≥—Ä–∞–º–º–æ–π, —Ç–∞–Ω—Ü–∞–º–∏, –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–æ–º –∏ –∫–æ–∫—Ç–µ–π–ª—è–º–∏.\n\n"
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: [Timepad](https://digitalclub.timepad.ru/event/3457454/)",
        parse_mode="Markdown",
    )
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    user_data[user_id] = {}

@dp.message(lambda m: m.from_user.id in user_data and 'first_name' not in user_data[m.from_user.id])
async def get_first_name(message: types.Message):
    user_data[message.from_user.id]['first_name'] = (message.text or "").strip()
    await message.answer("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?")

@dp.message(lambda m: m.from_user.id in user_data and 'last_name' not in user_data[m.from_user.id])
async def get_last_name(message: types.Message):
    user_data[message.from_user.id]['last_name'] = (message.text or "").strip()
    await message.answer("–ò–∑ –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏?")

@dp.message(lambda m: m.from_user.id in user_data and 'company' not in user_data[m.from_user.id])
async def get_company(message: types.Message):
    user_data[message.from_user.id]['company'] = (message.text or "").strip()
    first = user_data[message.from_user.id].get('first_name') or "–ì–æ—Å—Ç—å"
    await message.answer(f"{first}, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.")
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–µ —Ñ–∞–π–ª–æ–º).")

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    try:
        await message.answer("–°–ø–∞—Å–∏–±–æ! –ï—â—ë —Å–µ–∫—É–Ω–¥—É üòä")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ (aiogram v3)
        photo_size = message.photo[-1]
        file = await bot.get_file(photo_size.file_id)
        bio = BytesIO()
        await bot.download(file, destination=bio)
        bio.seek(0)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
        if not os.path.exists("templates/template.png"):
            await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª templates/template.png (1080√ó1080). –ó–∞–≥—Ä—É–∑–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        template = Image.open("templates/template.png").convert("RGBA")
        overlay = Image.new('RGBA', template.size, (255, 255, 255, 0))

        # –ì–æ—Ç–æ–≤–∏–º –∞–≤–∞—Ç–∞—Ä (471√ó613), —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ 40, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±–≤–æ–¥–∫–∞ #FD693C 2px
        avatar = Image.open(bio).convert("RGBA")
        w, h = avatar.size
        tw, th = 471, 613

        scale = max(tw / w, th / h)
        avatar = avatar.resize((int(w * scale), int(h * scale)), Image.LANCZOS)
        left = (avatar.width - tw) // 2
        top = (avatar.height - th) // 2
        avatar = avatar.crop((left, top, left + tw, top + th))

        mask = Image.new('L', (tw, th), 0)
        ImageDraw.Draw(mask).rounded_rectangle((0, 0, tw, th), radius=40, fill=255)
        avatar.putalpha(mask)

        border = Image.new('RGBA', (tw + 4, th + 4), (0, 0, 0, 0))
        bd = ImageDraw.Draw(border)
        bd.rounded_rectangle((0, 0, tw + 2, th + 2), radius=40, outline='#FD693C', width=2)
        border.paste(avatar, (2, 2), avatar)

        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª —Å —Ç–≤–æ–∏–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏)
        pos = (template.width - 80 - tw, template.height - 377 - th)
        overlay.paste(border, pos, border)
        final = Image.alpha_composite(template, overlay)

        # –ü–æ–¥–ø–∏—Å–∏
        draw = ImageDraw.Draw(final)
        try:
            name_font = ImageFont.truetype("fonts/GothamPro-Black.ttf", 35)
            comp_font = ImageFont.truetype("fonts/GothamPro-Medium.ttf", 30)
        except Exception:
            name_font = ImageFont.truetype("arial.ttf", 35)
            comp_font = ImageFont.truetype("arial.ttf", 30)

        uid = message.from_user.id
        full_name = f"{user_data[uid].get('first_name','')} {user_data[uid].get('last_name','')}".strip()
        company = user_data[uid].get('company', '')

        draw.text((pos[0], pos[1] + th + 50), full_name, font=name_font, fill=(255, 255, 255))
        draw.text((pos[0], pos[1] + th + 100), company, font=comp_font, fill=(255, 255, 255))

        path = f"invite_{uid}.png"
        final.convert("RGB").save(path, format="PNG")
        await message.answer_photo(photo=FSInputFile(path))

        await message.answer(
            "–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ VIP –±–∏–ª–µ—Ç–∞ ‚Äî\n"
            "–û–ø—É–±–ª–∏–∫—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Å—Ç–æ—Ä–∏—Å TG, FB –∏–ª–∏ IG, –ø—Ä–∏–∫—Ä–µ–ø–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Timepad (https://digitalclub.timepad.ru/event/3457454/)\n"
        )
        await message.answer(
            "üéÅ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º 12 –∞–≤–≥—É—Å—Ç–∞.\n\n"
            "–°–ª–µ–¥–∏ –∑–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º –∏ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –∫–ª—É–±–µ [–∑–¥–µ—Å—å](https://t.me/+l6rrLeN7Eho3ZjQy)\n\n"
            "–ñ–µ–ª–∞–µ–º —Ç–µ–±–µ —É–¥–∞—á–∏! üçÄ",
            parse_mode="Markdown"
        )
        await message.answer("–ü–æ–¥–µ–ª–∏—Å—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –ø–æ —Ä—ã–Ω–∫—É: @proparty_invite_bot")

        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="retry_photo")]
            ]
        )
        await message.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup)

        # –ó–∞–ø–∏—à–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        save_guest_to_sheets(uid, user_data[uid].get('first_name',''), user_data[uid].get('last_name',''), company)

        try:
            os.remove(path)
        except OSError:
            pass

    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: %s", e)
        await message.answer("–û–π! –§–æ—Ç–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–æ—Å—å. –Ø —É–∂–µ —á–∏–Ω—é. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

@dp.callback_query(F.data == "retry_photo")
async def retry_photo_handler(callback: CallbackQuery):
    await callback.message.answer("–û–∫–µ–π! –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ, –∏ –º—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π ‚ú®")

@dp.message(Command("whoami"))
async def whoami(message: types.Message):
    await message.answer(f"–¢–≤–æ–π user_id: {message.from_user.id}")

@dp.message(Command("draw"))
async def draw_winner(message: types.Message):
    admin_ids = [2002200912]
    if message.from_user.id not in admin_ids:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É.")
        return

    ws = get_worksheet()
    if not ws:
        await message.answer("Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    try:
        records = ws.get_all_records()
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ.")
        log.exception("–û—à–∏–±–∫–∞ Google Sheets: %s", e)
        return

    if not records:
        await message.answer("–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
        return

    await message.answer("üé∞ –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞—Ä–∞–±–∞–Ω...")
    suspense_list = random.sample(records, min(6, len(records)))
    for r in suspense_list[:-1]:
        fn = r.get('–ò–º—è') or r.get('first_name') or ''
        ln = r.get('–§–∞–º–∏–ª–∏—è') or r.get('last_name') or ''
        await message.answer(f"üåÄ {fn} {ln}...")
    winner = suspense_list[-1]
    fn = winner.get('–ò–º—è') or winner.get('first_name') or ''
    ln = winner.get('–§–∞–º–∏–ª–∏—è') or winner.get('last_name') or ''
    company = winner.get('–ö–æ–º–ø–∞–Ω–∏—è') or winner.get('company') or ''
    win_id = winner.get('ID') or winner.get('id') or ''

    await message.answer(f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:\n\nüëë {fn} {ln}, {company}\n\nüî• –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!")
    if win_id:
        try:
            await bot.send_message(int(win_id), f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {fn} {ln}! –¢—ã –≤—ã–∏–≥—Ä–∞–ª –ø—Ä–∏–∑ –æ—Ç Digital CPA Club üéÅ")
        except Exception as e:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é.")
            log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: %s", e)

@dp.message(Command("mystats"))
async def mystats_handler(message: types.Message):
    uid = message.from_user.id
    invited = referrals.get(uid, [])
    await message.answer(f"–¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª {len(invited)} —á–µ–ª–æ–≤–µ–∫(–∞).")

# ---------- Webhook bootstrapping ----------
async def on_startup(app: web.Application):
    assert BASE_URL, "BASE_URL/RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω"
    url = BASE_URL.rstrip("/") + "/webhook"
    await bot.set_webhook(url=url, secret_token=WEBHOOK_SECRET, drop_pending_updates=True)
    log.info("Webhook set to %s", url)

async def on_shutdown(app: web.Application):
    await bot.delete_webhook(drop_pending_updates=False)

def build_app():
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot, secret_token=WEBHOOK_SECRET).register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    return app

if __name__ == "__main__":
    web.run_app(build_app(), host="0.0.0.0", port=PORT)
